!=need to do, *=todo, ?=waste of time

== TODO before a release ==
* grep -r TODO .
! edit setup/install.mysql
* database changes into setup
* Increment version in main.inc
! Update themes
Setup checks for content negotiation and modrewrite (fetch index?test=true and ...

Google opensocial/friendconnect
Amazon S3 support

note, bleeding edge ideas are at: http://camera.phor.net/TODO

phpdoc
phpdoc -o HTML:frames:earthli -d . -t docs

Releases:
  svn export , chmod, ...

-- VALID HTML STRICT!!!

-- The big picture --
! Integrate with CMS's like Phpnuke!?
! Fantastico

-- Things that will break the API --
* Change photos.mtime to photos.filter
  - This will use a modification string like in picasa.ini
* Add a photo modification optimization engine to photo.class.php
  - It takes the existing photo and filter
  - Considers the new filter
  - Deletes stale caches
  - Acts in the best possible way
    . Rotate existing photo
    . Or start from scratch
    . Chooses to work off original or scaled image
  - Result: editing a photo will not require modifying the full sized image (takes forever) unless the user loads that full size image, in which case it is cached.
  - Admin may update these cache at their whim via the Update Database in Files in Admin
? logs.value_old is techically unnecessary
* Enumerate the photos.status and other columns
* A standard way of getting information about modules, and loading them (compare to theme-info.php)

-- Features --
* Admin->* "Changes Saved" should produce a message like Gmail as in Photo.php

-- UI (themes) --
* theme -> more obvious tabs
? Make Theme->AssetURL work if content negotiation is off

